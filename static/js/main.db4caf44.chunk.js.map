{"version":3,"sources":["reportWebVitals.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","REACT_APP_KEY","process","currYear","Date","getFullYear","datePicker","startDate","endDate","year","startMonth","endMonth","format","Main","useState","filter","setFilter","date","setDate","useEffect","params","URL","document","location","searchParams","get","name","utils","DateFnsUtils","SearchBar","onChange","string","path","render","props","Team","season","TeamList","Championships","value","setValue","fetch","method","headers","response","json","resp","filtered","competitions","participants","elem","id","includes","e","toLowerCase","map","comp","Card","CardActionArea","to","CardContent","area","className","teams","useParams","cupTemplate","console","log","error","Error","list","team","tla","ChampionshipSchedule","champId","setTeam","teamsId","teamUrl","Typography","venue","TeamSchedule","search","setSearch","selectedDate","handleDateChange","onSubmit","preventDefault","currUrl","window","href","set","history","pushState","TextField","label","target","DatePicker","views","Button","type","variant","color","App","matches","setMatches","dateFrom","setStart","dateTo","setEnd","url","utcDate","split","join","homeTeam","awayTeam","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.db4caf44.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useEffect, useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport {\n  Button,\n  Card,\n  CardActionArea,\n  CardContent,\n  TextField,\n  Typography,\n} from \"@material-ui/core\";\nimport \"@fontsource/roboto\";\n//import App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { DatePicker } from \"@material-ui/pickers\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport { MuiPickersUtilsProvider } from \"@material-ui/pickers\";\nimport { Route, Switch, useParams } from \"react-router\";\nimport { BrowserRouter as Router, Link } from \"react-router-dom\";\nimport { format } from \"date-fns\";\nconst REACT_APP_KEY = process.env.REACT_APP_KEY;\nfunction avalibleCups(id) {\n  //функция фильтрует доступные в данный момент кубки\n  const avalible = [\n    2000, 2001, 2002, 2003, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2021, 2152,\n  ];\n  return avalible.includes(id);\n}\nconst currYear = new Date().getFullYear(); //текущий год\nfunction datePicker(startDate, endDate, year) {\n  //функция выбора даты чемпионата\n  let startMonth = \"-01-01\"; //изначально месяц-день - начало и конец года\n  let endMonth = \"-12-31\";\n  if (startDate !== 0) {\n    //но если изменяются пользователем (стандартн. знач. = 0)\n    startMonth = \"-\" + format(startDate, \"MM-dd\"); //устанавливаются на выбранную\n  }\n  if (endDate !== 0) {\n    endMonth = \"-\" + format(endDate, \"MM-dd\");\n  }\n  return `?dateFrom=${year}${startMonth}&dateTo=${year}${endMonth}`; //возвращает используемый в API фильтр\n}\n\nfunction Main() {\n  const [filter, setFilter] = useState(\"\"); //стейт вордфильтра\n  const [date, setDate] = useState(currYear); //стейт для текущего года соревнований\n  useEffect(() => {\n    const params = new URL(document.location).searchParams; // берет url параметры\n    //задает переменные с этими параметрами\n    const year = params.get(\"date\");\n    const name = params.get(\"name\");\n\n    if (name) {\n      //проверяет существуют ли url параметры\n      setFilter(name);\n    }\n    if (year) {\n      setDate(year);\n    }\n  }, []);\n  //\n  function getFilter(string, date) {\n    setFilter(string);\n    setDate(date);\n  }\n\n  //роутер\n  // начальная страница - кубки\n  //после выбора идут команды этого кубка. Затем сам лист команды\n  return (\n    <MuiPickersUtilsProvider utils={DateFnsUtils}>\n      <SearchBar onChange={getFilter} />\n      <Switch>\n        <Route\n          path=\"/:id/teams/:teamsId\"\n          render={(props) => <Team season={date} filter={filter} />}\n        />\n        <Route\n          path=\"/:id/teams\"\n          render={(props) => <TeamList filter={filter} season={date} />}\n        />\n        <Route\n          path=\"/\"\n          render={(props) => <Championships filter={filter} season={date} />}\n        />\n      </Switch>\n    </MuiPickersUtilsProvider>\n  );\n}\n\nfunction Championships(props) {\n  const [value, setValue] = useState([]); //контейнер для поиска\n\n  useEffect(() => {\n    let url = \"http://api.football-data.org/v2/competitions/\";\n\n    fetch(url, {\n      method: \"GET\",\n      headers: {\n        \"X-Auth-Token\": `${REACT_APP_KEY}`,\n      },\n    })\n      .then((response) => response.json())\n      .then((resp) => {\n        const filtered = resp?.competitions;\n\n        return setValue(filtered);\n      });\n  }, [props]);\n  //ворд фильтр полученного из fetch массива\n  const participants = value\n    ?.filter((elem) => avalibleCups(elem.id))\n    .filter((e) => e.name.toLowerCase().includes(props.filter.toLowerCase() || \"\"))\n    .map((comp) => {\n      //\n      return (\n        <Card key={comp.id}>\n          <CardActionArea>\n            <Link\n              to={`${comp.id}/teams?date=${props.season || 2021}&name=${\n                props.filter || \"\"\n              }`}\n            >\n              <CardContent>\n                <p>{comp.name}</p>\n                <p>{comp.area.name}</p>\n              </CardContent>\n            </Link>\n          </CardActionArea>\n        </Card>\n      );\n    });\n  return (\n    <div className=\"main\">\n      <ul className=\"championships\">{participants}</ul>\n    </div>\n  );\n}\n\nfunction TeamList(props) {\n  const [teams, setValue] = useState([]);\n  const { id } = useParams(); //берем id из URL, используем для запроса api\n\n  useEffect(() => {\n    let url = \"http://api.football-data.org/v2/competitions/\";\n\n    const cupTemplate = `${id}/teams`;\n    let cupUrl = url + cupTemplate;\n    fetch(cupUrl, {\n      method: \"GET\",\n      headers: {\n        \"X-Auth-Token\": `${REACT_APP_KEY}`,\n      },\n    })\n      .then((response) => response.json())\n      .then(\n        (resp) => {\n          console.log(resp);\n          const filtered = resp.teams;\n          setValue(filtered);\n        },\n        (error) => {\n          throw new Error(error);\n        }\n      );\n  }, [id]); //квадратные скобки чтоб useEffect происходил только при рендере\n  const list = teams\n    .filter((e) => e.name.toLowerCase().includes(props.filter.toLowerCase() || \"\"))\n    .map((team) => {\n      return (\n        <Card key={team.id} className=\"club-list-item\">\n          <CardActionArea>\n            <Link\n              to={`/${id}/teams/${team.id}?date=${props.season || 2021}&name=${\n                props.filter || \"\"\n              }`}\n            >\n              <CardContent>\n                <p>{team.name}</p>\n                <p>{team.area.name}</p>\n                <p>{team.tla}</p>\n              </CardContent>\n            </Link>\n          </CardActionArea>\n        </Card>\n      );\n    });\n  return (\n    <div className=\"main flex\">\n      <ul className=\"teams\">{list}</ul>\n      <ChampionshipSchedule champId={id} season={props.season} />\n    </div>\n  );\n}\nfunction Team(props) {\n  const [team, setTeam] = useState({});\n  let { teamsId } = useParams();\n  useEffect(() => {\n    const teamUrl = `http://api.football-data.org/v2/teams/${teamsId}`;\n    fetch(teamUrl, {\n      method: \"GET\",\n      headers: {\n        \"X-Auth-Token\": `${REACT_APP_KEY}`,\n      },\n    })\n      .then((response) => response.json())\n      .then((resp) => {\n        setTeam({ ...resp });\n      });\n    // eslint-disable-next-line\n  }, []);\n  return (\n    <div>\n      <Card className=\"club-card\">\n        <CardContent>\n          <Typography>{team.name}</Typography>\n          <Typography>{team.venue}</Typography>\n        </CardContent>\n      </Card>\n      <TeamSchedule id={teamsId} season={props.season} />\n    </div>\n  );\n}\nfunction SearchBar(props) {\n  const [search, setSearch] = useState(\"\");\n  const [selectedDate, handleDateChange] = useState(new Date());\n\n  function handleChange(e) {\n    setSearch(e.target.value);\n  }\n  function submitAction(e) {\n    e.preventDefault(); //не дает перезагрузиться странице при отправке формы\n    props.onChange(search, format(selectedDate, \"yyyy\")); // изменяет стейт даты в <Main>\n    // format приводит дату к необходимому виду\n    const currUrl = new URL(window.location.href);\n    //ставим url параметры\n    currUrl.searchParams.set(\"date\", format(selectedDate, \"yyyy\"));\n    currUrl.searchParams.set(\"name\", search);\n    //пушим параметры в конец url\n    window.history.pushState({}, \"\", currUrl);\n    //оставляем поисковую строку пустой\n    setSearch(\"\");\n  }\n  return (\n    <Card className=\"search-bar\">\n      <CardContent>\n        <form onSubmit={submitAction} method=\"GET\">\n          <TextField\n            name=\"keyword\"\n            label=\"Поиск\"\n            value={search}\n            onChange={handleChange}\n            className=\"form-element\"\n          />\n\n          <DatePicker\n            name=\"date\"\n            views={[\"year\"]}\n            label=\"Year only\"\n            onChange={handleDateChange}\n            value={selectedDate}\n            className=\"form-element\"\n          />\n          <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n            Поиск\n          </Button>\n        </form>\n      </CardContent>\n    </Card>\n  );\n}\nfunction App(props) {\n  return (\n    <Router>\n      <Main />\n    </Router>\n  );\n}\nfunction ChampionshipSchedule(props) {\n  const [matches, setMatches] = useState([]);\n  const [dateFrom, setStart] = useState(0);\n  const [dateTo, setEnd] = useState(0);\n  useEffect(() => {\n    let url = `http://api.football-data.org/v2/competitions/${props.champId}/matches`;\n    url += datePicker(dateFrom, dateTo, props.season); //добавляем строку с фильтром\n    console.log(url);\n    fetch(url, {\n      method: \"GET\",\n      headers: {\n        \"X-Auth-Token\": `${REACT_APP_KEY}`,\n      },\n    })\n      .then((response) => response.json())\n      .then((resp) => setMatches(resp.matches));\n    // eslint-disable-next-line\n  }, [dateFrom, dateTo, props.season]);\n  const list = matches?.map((elem) => {\n    return (\n      <li key={elem.id}>\n        <div className=\"match\">\n          <p>{elem.utcDate.split(/T|Z/).join(\" \")}</p>\n          <p>{elem.homeTeam.name}</p>\n          <p>{elem.awayTeam.name}</p>\n        </div>\n      </li>\n    );\n  });\n  if (!matches) {\n    //в случае возниконвения ошибки рендерим эту страницу\n    return (\n      <div className=\"schedule\">\n        <div className=\"date-bar\">\n          <DatePicker\n            name=\"date\"\n            views={[\"month\", \"date\"]}\n            label=\"От\"\n            onChange={setStart}\n            format=\"MM/dd\"\n            value={dateFrom}\n          />\n          <DatePicker\n            name=\"date\"\n            views={[\"month\", \"date\"]}\n            format=\"MM/dd\"\n            label=\"До\"\n            onChange={setEnd}\n            value={dateTo}\n          />\n        </div>\n        <p>Ничего не найдено. Попробуйте ввести другую дату</p>\n      </div>\n    );\n  }\n  return (\n    <div className=\"schedule\">\n      <div className=\"date-bar\">\n        <DatePicker\n          name=\"date\"\n          views={[\"month\", \"date\"]}\n          label=\"От\"\n          onChange={setStart}\n          format=\"MM/dd\"\n          value={dateFrom}\n        />\n        <DatePicker\n          name=\"date\"\n          views={[\"month\", \"date\"]}\n          format=\"MM/dd\"\n          label=\"До\"\n          onChange={setEnd}\n          value={dateTo}\n        />\n      </div>\n      <ul className=\"match-list\">{list}</ul>\n    </div>\n  );\n}\nfunction TeamSchedule(props) {\n  const [matches, setMatches] = useState([]);\n  const [dateFrom, setStart] = useState(0);\n  const [dateTo, setEnd] = useState(0);\n  useEffect(() => {\n    let url = `http://api.football-data.org/v2/teams/${props.id}/matches`;\n    url += datePicker(dateFrom, dateTo, props.season);\n    fetch(url, {\n      method: \"GET\",\n      headers: {\n        \"X-Auth-Token\": `${REACT_APP_KEY}`,\n      },\n    })\n      .then((response) => response.json())\n      .then((resp) => {\n        setMatches(resp.matches);\n      });\n\n    // eslint-disable-next-line\n  }, [dateFrom, dateTo, props.season]);\n  const list = matches?.map((elem) => {\n    return (\n      <li key={elem.id}>\n        <div className=\"match team-match\">\n          <p>{elem.utcDate.split(/T|Z/).join(\" \")}</p>\n          <p>{elem.homeTeam.name}</p>\n          <p>{elem.awayTeam.name}</p>\n        </div>\n      </li>\n    );\n  });\n  if (!matches) {\n    return (\n      <div className=\"schedule main\">\n        <div className=\"date-bar\">\n          <DatePicker\n            name=\"date\"\n            views={[\"month\", \"date\"]}\n            label=\"От\"\n            onChange={setStart}\n            format=\"MM/dd\"\n            value={dateFrom}\n          />\n          <DatePicker\n            name=\"date\"\n            views={[\"month\", \"date\"]}\n            format=\"MM/dd\"\n            label=\"До\"\n            onChange={setEnd}\n            value={dateTo}\n          />\n        </div>\n        <p className=\"error\">Ничего не найдено. Попробуйте ввести другую дату</p>\n      </div>\n    );\n  }\n  return (\n    <div className=\"schedule margin main\">\n      <div className=\"date-bar\">\n        <DatePicker\n          name=\"date\"\n          views={[\"month\", \"date\"]}\n          label=\"От\"\n          onChange={setStart}\n          format=\"MM/dd\"\n          value={dateFrom}\n        />\n        <DatePicker\n          name=\"date\"\n          views={[\"month\", \"date\"]}\n          format=\"MM/dd\"\n          label=\"До\"\n          onChange={setEnd}\n          value={dateTo}\n        />\n      </div>\n      <ul className=\"match-list\">{list}</ul>\n    </div>\n  );\n}\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}